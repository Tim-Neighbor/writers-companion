using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;
using System.Windows.Forms;
using System.IO;

namespace TheWritersCompanion
{
    /// <summary>
    /// Interaction logic for StartWindow.xaml
    /// Launched at project startup and used to
    /// create and open projects.
    /// Author: Dylan Schulz
    /// .xaml file created by Dylan Schulz
    /// </summary>
    public partial class StartWindow : Window
    {
        // Title for MessageBoxes generated by this window
        private const string MESSAGE_BOX_TITLE = "The Writer's Companion";

        /// <summary>
        /// Initializes the window and sets
        /// initial user focus to the selectDirectoryTextBox
        /// </summary>
        public StartWindow()
        {
            InitializeComponent();

            selectDirectoryTextBox.Focus();
        }

        /// <summary>
        /// When the selectDirectoryTextBox gets user focus,
        /// select all text within it.
        /// </summary>
        /// <param name="sender">The control that sent this event</param>
        /// <param name="e">Event args for this event</param>
        private void selectDirectoryTextBox_GotFocus(object sender,
            RoutedEventArgs e)
        {
            selectDirectoryTextBox.SelectAll();
        }

        /// <summary>
        /// Handles a click on the browseDirectoryButton by
        /// bringing up a built in FolderBrowserDialog.
        /// When a path is selected, the selectDirectoryTextBox is
        /// filled with the selected path.
        /// </summary>
        /// <param name="sender">The control that sent this event</param>
        /// <param name="e">Event args for this event</param>
        private void browseDirectoryButton_Click(object sender,
            RoutedEventArgs e)
        {
            FolderBrowserDialog folderBrowserDialog =
                new FolderBrowserDialog();
            folderBrowserDialog.ShowDialog();
            selectDirectoryTextBox.Text =
                folderBrowserDialog.SelectedPath;
        }

        /// <summary>
        /// Handles a click for the importProjectButton.
        /// First checks if the directory in selectDirectoryTextBox
        /// is a valid file system entry. If so, open an
        /// ImportProjectWindow dialog box to import a project.
        /// </summary>
        /// <param name="sender">The control that sent this event</param>
        /// <param name="e">Event args for this event</param>
        private void importProjectButton_Click(object sender,
            RoutedEventArgs e)
        {
            string projectDirectory = selectDirectoryTextBox.Text;

            OutcomeCode directoryValidOutcome =
                CheckIfDirectoryValid(projectDirectory);

            if (directoryValidOutcome == OutcomeCode.SUCCESS)
            {
                ImportProjectWindow importProjectWindow
                    = new ImportProjectWindow(projectDirectory);
                importProjectWindow.ShowDialog();
            }
            else
            {
                DisplayOutcomeMessageBox(directoryValidOutcome);
            }
        }

        /// <summary>
        /// Handles a click for the createProjectButton.
        /// Tries to initialize a new project
        /// project at the directory given in selectDirectoryTextBox.
        /// Creates a Controller and tries to set its directory.
        /// If successful, create a MainWindow to open
        /// the actual editor window for this project
        /// and close this window.
        /// </summary>
        /// <param name="sender">The control that sent this event</param>
        /// <param name="e">Event args for this event</param>
        private void createProjectButton_Click(object sender,
            RoutedEventArgs e)
        {
            AttemptToInitializeProject(true);
        }

        /// <summary>
        /// Handles a click for the openProjectButton.
        /// Tries to open an existing
        /// project at the directory given in selectDirectoryTextBox.
        /// Creates a Controller and tries to set its directory.
        /// If successful, create a MainWindow to open
        /// the actual editor window for this project
        /// and close this window.
        /// </summary>
        /// <param name="sender">The control that sent this event</param>
        /// <param name="e">Event args for this event</param>
        private void openProjectButton_Click(object sender, RoutedEventArgs e)
        {
            AttemptToInitializeProject(false);
        }

        /// <summary>
        /// A helper method that tries to initialize a
        /// project at the directory given in selectDirectoryTextBox.
        /// Creates a Controller and tries to set its directory.
        /// If successful, create a MainWindow to open
        /// the actual editor window for this project
        /// and close this window.
        /// </summary>
        /// <param name="isNewProject">true if the project
        /// should be a new project, false if not</param>
        private void AttemptToInitializeProject(bool isNewProject)
        {
            string projectDirectory = selectDirectoryTextBox.Text;

            IController controller = new Controller();

            OutcomeCode outcome
                = controller.SetDirectory(projectDirectory, isNewProject);

            if (outcome != OutcomeCode.SUCCESS)
            {
                DisplayOutcomeMessageBox(outcome);
            }
            else
            {
                MainWindow mainWindow = new MainWindow(projectDirectory, isNewProject, controller);
                mainWindow.Show();
                Close();
            }
        }

        /// <summary>
        /// A helper method that checks if a given file system entry
        /// represents a valid directory on the computer.
        /// </summary>
        /// <param name="fileSystemEntry">The file system path to
        /// check</param>
        /// <returns>An OutcomeCode representing the
        /// success or failure of this check</returns>
        private OutcomeCode CheckIfDirectoryValid(string fileSystemEntry)
        {
            bool directoryExists = Directory.Exists(fileSystemEntry);

            if (directoryExists)
            {
                return OutcomeCode.SUCCESS;
            }
            else
            {
                return OutcomeCode.DIRECTORY_DOES_NOT_EXIST;
            }
        }

        /// <summary>
        /// Informs the user of errors when they occur.
        /// Pops up a message box giving them an error
        /// message based on the OutcomeCode
        /// </summary>
        /// <param name="outcome">The OutcomeCode representing
        /// the error to display</param>
        private void DisplayOutcomeMessageBox(OutcomeCode outcome)
        {
            string message = OutcomeCodeTranslator.GetUserFriendlyErrorMessage(outcome);

            System.Windows.MessageBox.Show(message, MESSAGE_BOX_TITLE, MessageBoxButton.OK, MessageBoxImage.Error);
        }
    }
}
